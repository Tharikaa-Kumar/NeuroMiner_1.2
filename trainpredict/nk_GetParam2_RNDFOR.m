% ==========================================================================
% FORMAT [param, model] = nk_GetParam_MEXELM(Y, label, SlackParam, ~, ...
%                                           ModelOnly)
% ==========================================================================
% Train LIBLINEAR models and evaluate their performance using Y & label, 
% SlackParam,
% if ModelOnly = 1, return only model
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (c) Nikolaos Koutsouleris, 08/2012

function [param, model] = nk_GetParam2_RNDFOR(Y, label, ModelOnly, Param)
global EVALFUNC MODELDIR MODEFL 

param = [];
switch MODEFL
    case 'classification'
        if iscell(Y)  % MCL-based learning not implemented yet
        else % Univariate case
            model = pyrunfile('py_classRF_train.py', 'model_file', ...
                feat = double(Y), ...
                lab = int64(label), ...
                n_est = int64(Param(1)), ...
                n_maxfeat = double(Param(2)), ...
                crit = int64(Param(4)), ... %%
                maxd = int64(Param(3)), ...
                minss = double(Param(5)), ...
                minsl = double(Param(6)), ...
                minwfl = double(Param(7)), ...
                maxln = int64(Param(8)), ...
                minid = int64(Param(9)), ...
                boot = int64(Param(10)), ...
                oobs = int64(Param(11)), ...
                classw = int64(Param(14)), ...
                ccpa = int64(Param(12)), ...
                maxs = int64(Param(13)), ...
                rootdir = MODELDIR);  

         

        end
    case 'regression'

        model = pyrunfile('py_regRF_train.py', 'model_file', ...
                feat = Y, ...
                lab = label, ...
                n_est = int64(Param(1)), ...
                n_maxfeat = double(Param(2)), ...
                crit = int64(Param(4)), ... %%
                maxd = int64(Param(3)), ...
                minss = double(Param(5)), ...
                minsl = double(Param(6)), ...
                minwfl = double(Param(7)), ...
                maxln = int64(Param(8)), ...
                minid = int64(Param(9)), ...
                boot = int64(Param(10)), ...
                oobs = int64(Param(11)), ...
                ccpa = int64(Param(12)), ...
                maxs = int64(Param(13)), ...
                rootdir = MODELDIR);  
     
end

if ~ModelOnly
    [param.target] = predict_liblin(label, Y, model);
    param.dec_values = param.target;
    param.val = EVALFUNC(label, param.dec_values);
end
