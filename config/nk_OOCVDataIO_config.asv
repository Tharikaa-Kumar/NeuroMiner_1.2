% =========================================================================
% FORMAT NM = nk_OOCVDataIO_config(NM, O, parentstr)
% =========================================================================
% This function coordinates the input of independent test data into NM
%
% Inputs:
% -------
% NM        : The NM workspace
% O         : The OOCV workspace (containt
% parentstr : Name of the calling function
%
% Outputs:
% --------
% NM (see above)
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (c) Nikolaos Koutsouleris 07/2023

function NM = nk_OOCVDataIO_config(NM, O, parentstr)
    
if (~exist('O','var') || isempty(O)) || isnumeric(O)
    [NM, Y, inp.oocvind, inp.fldnam, inp.dattype] = nk_SelectOOCVdata(NM, O, 1);
else
    inp.fldnam      = O.fldnam;
    inp.oocvind     = O.ind;
    Y               = NM.(inp.fldnam){inp.oocvind};
    Y.desc          = O.desc;
    Y.date          = O.date;
    Y.label_known   = false;
    switch O.fldnam
        case 'OOCV'
            inp.dattype     = 'independent test data';
        case 'C'
            inp.dattype     = 'calibration data';
    end
end
if isempty(inp.oocvind), return; end
NM.(inp.fldnam){inp.oocvind}.desc = Y.desc;
NM.(inp.fldnam){inp.oocvind}.date = Y.date;
if ~isfield(NM.(inp.fldnam){inp.oocvind},'n_subjects_all'), NM.(inp.fldnam){inp.oocvind}.n_subjects_all = Inf; end
if ~isfield(NM.(inp.fldnam){inp.oocvind},'labels_known') && isfield(Y,'labels_known') || (NM.(inp.fldnam){inp.oocvind}.labels_known ~=  Y.labels_known)
    NM.(inp.fldnam){inp.oocvind}.labels_known = Y.labels_known; 
end
inp.currmodal = 1;
inp.nummodal = numel(NM.Y);
inp.na_str = '?';
inp.covflag = false;
inp.desc = Y.desc;
inp.Ydims = cellfun('size', NM.Y , 2);
inp.datadescriptor = NM.datadescriptor;
inp.brainmask = NM.brainmask;
inp.badcoords = NM.badcoords;
inp.analysis = NM.analysis;
if isfield(NM,'covars'), inp.covflag = true; end

act = 1; while act, [act, Y, inp] = DefineOOCVData(inp, Y, parentstr); end

NM.(inp.fldnam){inp.oocvind} = Y;

% _________________________________________________________________________
function [act, datacontainer, inp ] = DataContainer(inp, datacontainer, parentstr)

nk_PrintLogo
navistr = sprintf('%s\t>>> %s',parentstr, 'Data input'); fprintf('\nYou are here: %s >>>',navistr); 

fprintf('\n\n\t============================')
fprintf('\n\t    AVAILABLE MODALITIES  ') 
fprintf('\n\t============================')
fprintf('\n')
for i=1:inp.nummodal
    availstr = 'available';
    if isfield(datacontainer,'Y') && ischar(datacontainer.Y{i})
        availstr = 'linked';
    elseif ~isfield(datacontainer,'Y')  || i > numel(datacontainer.Y) || isempty(datacontainer.Y{i})
        availstr = 'not loaded';
    end
    str = sprintf('Modality %g [ %s ]: ', i, inp.datadescriptor{i}.desc);
    fprintf('\n'); 
    if i==inp.currmodal
        fprintf('==> %s ', str); 
    else
        fprintf('\t%s', str); 
    end
    if strcmp(availstr,'linked')
        fprintf('%s [ %s ] ', availstr, datacontainer.Y{i});
    else
        fprintf( '%s ', availstr);
    end   
end
fprintf('\n')
if inp.nummodal > 1
    mnuact = [ sprintf('Select modality [ currently: modality %g ]',inp.currmodal) ...
           sprintf('|Add/Modify data in modality %g', inp.currmodal) ... 
           sprintf('|Delete data in modality %g', inp.currmodal) ]; 

    mnusel = 1:3;
else
    mnuact = 'Add/Modify data|Delete data' ; 
    mnusel = 2:3;
end

if isfield(datacontainer,'Y') && ~isempty(datacontainer.Y)
    if ~ischar(datacontainer.Y)
        mnuact = [mnuact '|Export data container to file and create link in NM structure|Replace data container with link to file'];
        mnusel = [mnusel  4 5];
    else
        mnuact = [mnuact '|Update data link '];
        mnusel = [mnusel  5];
        if exist(datacontainer.Y,'file')
            mnuact = [mnuact '|Re-import data from file into NM structure'];
            mnusel = [mnusel  6];
        end
    end
else
    mnuact = [mnuact '|Fill data container with link to file'];
    mnusel = [mnusel 5];
end

if inp.covflag && isfield(datacontainer,'Y') && datacontainer.n_subjects_all>0
    if isfield(datacontainer,'covars')
        mnuact = [ mnuact '|Modify covariate data' ];    
    else
        mnuact = [ mnuact '|Add covariate data' ];   
    end
    mnusel = [mnusel 7];
end

% check whether an alternative label was used in one of the locked analyses
altlabels = [];
for i=1:length(inp.analysis)
    if isfield(inp.analysis{1,i}.params, 'label') && inp.analysis{1,i}.params.label.altlabelflag
        altlabels = [altlabels, inp.analysis{1,i}.params.label.labelname];
    end
end

if ~isempty(altlabels)
    mnuact = [mnuact '|Add alternative label(s)'];
    mnusel = [mnusel 8]; 
end

act = nk_input(sprintf('Select action for container %s',inp.desc),0,'mq',mnuact,mnusel);

switch act
    
    case 1 % Define active modality
        inp.currmodal = nk_input('Select active modality',0,'i',inp.currmodal);
        if inp.currmodal > inp.nummodal, inp.currmodal = inp.nummodal; end
    case 2 % Read-in data
        datacontainer = InputDataModality(inp, datacontainer, navistr);
    case 3 % Clear data from modality
        datacontainer = ClearDataModality(datacontainer);
        if ~isfield(datacontainer,'Y'), act = 0; end
    case 4
        datacontainer = LinkData2Disk(datacontainer, 'export&link');
    case 5
        datacontainer = LinkData2Disk(datacontainer, 'replacelink');
    case 6
        datacontainer = ReimportDatafromDisk(datacontainer);
    case 7
        % Don't forget the covariates if they are present in the discovery data
        datacontainer.covars = nk_DefineCovars_config(datacontainer.n_subjects_all, NM.covars); 
    case 8
        % if alternative labels were used in any of the locked analyses,
        % new labels have to be input for the validation data too 
        datacontainer.label = nk_DataLabel_config(datacontainer.n_subjects_all, altlabels);
end

NM.(inp.fldnam){inp.oocvind} = datacontainer;

% _________________________________________________________________________
function datacontainer = ReimportDatafromDisk(datacontainer)

fprintf('\nRe-importing linked data container into NM: %s',datacontainer.Y);
if iscell(datacontainer.Y) 
    for i=1:numel(datacontainer.Y)
        if ischar(datacontainer.Y{i}) && exist(datacontainer.Y{i},"file")
            datafile = datacontainer.Y{i};
            datacontainer.Y{i} = load(datafile,'Y');
        end
    end
else
    load(datacontainer.Y);
    if exist("OOCV","var")
       datacontainer.Y = OOCV;
    else
       datacontainer.Y = Y;
    end
end

% _________________________________________________________________________
function datacontainer = LinkData2Disk(datacontainer, act)
global OCTAVE

switch act
    case 'export&link'
        [filename, pathname] = uiputfile({'.mat'},'Save data container to disk');
        if isempty(filename), return, end
        for i=1:numel(datacontainer.Y)
            pth = fullfile(pathname, filename, sprintf("_M%g",i));
            Y = datacontainer.Y{i};
            Modality = i;
            fprintf('Exporting Modality %g to %s', Modality, pth)
            try
                save(pth, 'Y', 'Modality');
            catch
                if OCTAVE
                    save(pth, 'Y', 'Modality');
                else
                    save(pth, 'Y', 'Modality', '-v7.3');
                end
            end
            datacontainer.Y{i} = pth;
        end
    case 'replacelink'
        [filename, pathname] = uigetfile({'.mat'},'Link data container to data file on disk','MultiSelect','on');
        if iscell(filename)
            for i=1:numel(filename)
                suff = sprintf('_M%g',i);
                idx = strcmp(filename,suff);
                if ~any(idx)
                    errordlg(sprintf('Your file selection does not contain a valid NM Data Container for Modality #%g',i),'Error')
                    break
                end
                pth = fullfile(pathname, filename{idx});
                datacontainer.Y{i} = pth;
            end
        else
            load(pth)
            if exist("OOCV","var")
                datacontainer = OOCV;
                datacontainer.Y = pth;
            elseif exist("Modality","var")
                datacontainer.Y{Modality} = pth;
            else
                errordlg(sprintf('Cannot assign file %s to Modality', pth),'Error')
            end
        end
end

% _________________________________________________________________________
function datacontainer = InputDataModality(inp, datacontainer, parentstr)

nk_PrintLogo
fprintf('\n\n'); mestr = sprintf('Input %s for Modality %g', inp.dattype, inp.currmodal);  
navistr = sprintf('%s >>> %s',parentstr, mestr); fprintf('\nYou are here: %s >>>',navistr); 

% Retrieve input settings from the discovery data
IO = inp.datadescriptor{inp.currmodal}.input_settings;
if isfield(IO,'selCases'), IO = rmfield(IO,'selCases'); end

% Remove setting for non-labeled subjects
IO.nangroup=false;
IO.nan_subjects=0;
if isfield(IO,'Pnan')
    IO = rmfield(IO,'Pnan');
    IO = rmfield(IO,'Vnan');
end

% Activate independent test data input
IO.oocvflag = true;
IO.labels_known = datacontainer.labels_known;
IO.badcoords = inp.badcoords{inp.currmodal}; 
IO.brainmask = inp.brainmask{inp.currmodal}; 
IO.Ydims = inp.Ydims(inp.currmodal);

if IO.labels_known
    IO.n_subjects = IO.n_subjects/0;
    IO.n_subjects_all = Inf;
else
    IO.n_subjects = Inf;
    IO.n_subjects_all = Inf;
    IO.n_samples = 1;
end
    
if inp.currmodal>1 && isfield(datacontainer,'cases')
    IO.ID = datacontainer.cases;
else
    IO = rmfield(IO,'ID');
    if isfield(IO,'survanal_time'), IO = rmfield(IO,'survanal_time'); end
end
    
if strcmp(IO.datasource,'matrix')
    IO.matrix_edit = inp.na_str;
    IO.sheets = inp.na_str;
    IO.sheet = inp.na_str;
    IO.sheets = inp.na_str;
    IO.M_edit = inp.na_str;
    IO.featnames_cv = NM.featnames{inp.currmodal};
else
    if strcmp(IO.datasource,'spm')
        IO.datasource = 'nifti'; 
        IO.groupmode = 1;
        IO = rmfield(IO,'design');
        IO = SetFileFilter(IO,IO.groupmode,IO.datasource);
    end
    IO.globvar_edit = inp.na_str;
    if isfield(IO,'g') && ~isempty(IO.g), IO = rmfield(IO,'g'); end
    if IO.labels_known
        IO.P = repmat({[]},1,IO.n_samples);
        IO.V = IO.P;
    else
        IO.P = []; 
        IO.V = [];
    end
    IO.PP = [];
    IO = rmfield(IO,'Vinfo');
    IO = rmfield(IO,'Vvox');
    IO = rmfield(IO,'F');
    IO = rmfield(IO,'files');
    if isfield(IO,'L') && ~isempty(IO.L)
        IO.label_edit = inp.na_str;
        IO = rmfield(IO,'L'); 
    end
end
t_act = Inf; t_mess = [];while ~strcmp(t_act,'BACK'), [ IO, t_act, t_mess ] = DataIO( datacontainer , mestr, IO, t_mess, inp.currmodal);  end
if IO.completed
    datacontainer = TransferModality2NM( datacontainer, IO, inp.currmodal ); 
    datacontainer.n_subjects_all = size(datacontainer.cases,1);
else
    datacontainer = Y;
end
% _________________________________________________________________________
function datacontainer = ClearDataModality(inp, datacontainer)

if iscell(datacontainer.Y)
    datacontainer.Y{inp.currmodal} = [];
else
    datacontainer.Y = [];
end
datacontainer.brainmask{inp.currmodal} = [];
datacontainer.badcoords{inp.currmodal} = [];
datacontainer.datadescriptor{inp.currmodal} = [];
datacontainer.files{inp.currmodal} = [];
datacontainer.featnames{inp.currmodal} = [];

if iscell(datacontainer.Y) &&  ~sum(~cellfun(@isempty,datacontainer.Y ))
    datacontainer = rmfield(datacontainer,'Y');
    datacontainer = rmfield(datacontainer,'brainmask');
    datacontainer = rmfield(datacontainer,'badcoords');
    datacontainer = rmfield(datacontainer,'datadescriptor');
    datacontainer = rmfield(datacontainer,'files');
    datacontainer = rmfield(datacontainer,'featnames') ;
    datacontainer = rmfield(datacontainer,'cases');
    if isfield(datacontainer,'covars')
        datacontainer = rmfield(datacontainer,'covars');
    end
    if isfield(datacontainer,'groupnames')
        datacontainer = rmfield(datacontainer,'groupnames');
    end
    datacontainer = rmfield(datacontainer,'label');  
    datacontainer.n_subjects = 0;
    datacontainer.n_subjects_all = 0;
end

